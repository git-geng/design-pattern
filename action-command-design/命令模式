命令（Command）模式：
    将一个请求封装为一个对象，使发出请求的责任和执行请求的责任分割开。
    这样两者之间通过命令对象进行沟通，这样方便将命令对象进行储存、传递、调用、增加与管理。
优点：
   1。降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。
   2。增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足“开闭原则”，对扩展比较灵活。
   3。可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。
   4。方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。

缺点：
   每一个操作都要有一个命令类，增加了系统复杂度

结构：
         Invoker: 是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者。
        Receiver: 具体命令的执行者
         Commond: 声明执行命令的接口，拥有执行命令的抽象方法 execute()。
 ConcreteCommond: 是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。

场景：
  1。当系统需要将请求调用者与请求接收者解耦时，命令模式使得调用者和接收者不直接交互。
  2。当系统需要随机请求命令或经常增加或删除命令时，命令模式比较方便实现这些功能。
  3。当系统需要执行一组操作时，命令模式可以定义宏命令来实现该功能。
  4。方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。