享元（Flyweight）模式：运用共享技术来有効地支持大量细粒度对象的复用。
     它通过共享已经存在的又橡来大幅度减少需要创建的对象数量、避免大量相似类的开销，从而提高系统资源的利用率。
     区分内部外部状态、外部状态外部化
     内部状态：不随环境变化的部分
     外部状态：随环境变化的部分

优点：
    相同的对象只保存一份，降低了系统中对象的数量

缺点：
   为了共享，需要对象不能共享的状态外部化，增加了系统的复杂度
   取享元模式的外部状态会使得运行时间稍微变长。

角色：
   抽象享元（flyWeight）：是所有的具体享元类的基类，为具体享元规范需要实现的公共接口，非享元的外部状态以参数的形式通过方法传入。
   具体享元（Concrete flyWeight）：享元的具体实现类
   非享元(Unshareable flyWeight):是不可以共享的外部状态，它以参数的形式注入具体享元的相关方法中。
   享元工厂（Flyweight Factory): 负责创建和管理享元角色。当客户对象请求一个享元对象时，享元工厂检査系统中是否存在符合要求的享元对象，
                               如果存在则提供给客户；如果不存在的话，则创建一个新的享元对象。

使用场景：
    系统中存在大量相同或相似的对象，这些对象耗费大量的内存资源。
    大部分的对象可以按照内部状态进行分组，且可将不同部分外部化，这样每一个组只需保存一个内部状态。
    由于享元模式需要额外维护一个保存享元的数据结构，所以应当在有足够多的享元实例时才值得使用享元模式。
