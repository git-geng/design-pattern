单例模式（5）： 将对象的创建与使用分离。降低系统的复杂度

单例（Singleton）模式：  某个类只能生成一个实例，该类提供了一个全局访问点供外部获取该实例，
                      其拓展是有限多例模式。
原型（Prototype）模式：将一个对象作为原型，通过对其进行复制而克隆出多个和原型类似的新实例。

工厂方法（FactoryMethod）模式： （1..1）
    定义一个用于创建产品的接口，由子类决定生产什么产品;
    知道工厂类，就可以创建产品

抽象工厂（AbstractFactory）模式：（1..N）
     1。提供一个创建产品族的接口，其每个子类可以生产一系列相关的产品。
     2。增加产品种类，所有的工厂类都要修改
     3。增加产品具体实现，只要新加一个工厂类

建造者（Builder）模式：将一个复杂对象分解成多个相对简单的部分，然后根据不同需要分别创建它们，
                    最后构建成该复杂对象。



单例，原型，工厂方法，抽象工厂-->单个对象的创建
建造者模式--->把单个对象，组装成复杂对象




