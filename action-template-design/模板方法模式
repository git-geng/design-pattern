模板方法（Template Method）模式的：
        抽象类和子类之间的协调工作
        定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。
优点：
   封装了不可变部分，扩展可变部分，它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。
   父类中提供了公共方法，便于代码复用
   部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。

缺点：
   不同的实现，都要有一个子类实现，导致类的数量增加，系统更加庞大、设计也更加抽象。
   父类中的抽象方法由子类实现，子类的结果会影响父类的结果，反向控制，提高代码阅读难度

模式结构：
    (1) 抽象类（Abstract Class）：负责给出一个算法的轮廓和骨架。它由一个模板方法和若干个基本方法构成。这些方法的定义如下。
         ① 模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。
    (2) 具体子类（Concrete Class）：实现抽象类中所定义的抽象方法和钩子方法，它们是一个顶级逻辑的一个组成步骤。
