参照：http://c.biancheng.net/view/1326.html

开闭原则 ： 对修改封闭，对扩展开放

里氏替换原则：
    子类可以扩展父类的功能，但不能改变父类原有的功能。
    也就是说：子类继承父类时，除添加新的方法完成新增功能外，尽量不要重写父类的方法。

    里氏替换原则是实现开闭原则的重要方式之一。
    它克服了继承中重写父类造成的可复用性变差的缺点。
    它是动作正确性的保证。即类的扩展不会给已有的系统引入新的错误，降低了代码出错的可能性。

依赖倒置原则
    目的：依赖倒置原则的目的是通过要面向接口的编程来降低类间的耦合性
    原则：高层模块不应该依赖低层模块，两者都应该依赖其抽象；抽象不应该依赖细节，细节应该依赖抽象
        要面向接口编程，不要面向实现编
        它降低了客户与实现模块之间的耦合。
    好处：

单一指责原则：
    原则：单一职责原则规定一个类应该有且仅有一个引起它变化的原因，否则类应该被拆分
    目的：单一职责原则的核心就是控制类的粒度大小、将对象解耦、提高其内聚性
    优点：
        降低类的复杂度。一个类只负责一项职责，其逻辑肯定要比负责多项职责简单得多。
        提高类的可读性。复杂性降低，自然其可读性会提高。
        提高系统的可维护性。可读性提高，那自然更容易维护了。
        变更引起的风险降低。变更是必然的，如果单一职责原则遵守得好，当修改一个功能时，
        可以显著降低对其他功能的影响。

接口隔离原则：
    原则：要为各个类建立它们需要的专用接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。
         拆分接口为小的
    目的：不用实现多余的无用的接口

迪米特法则
    定义：如果两个软件实体无须直接通信，那么就不应当发生直接的相互调用，
         可以通过第三方转发该调用。其目的是降低类之间的耦合度，提高模块的相对独立性。
    优点：
         迪米特法则要求限制软件实体之间通信的宽度和深度，正确使用迪米特法则将有以下两个优点。
         降低了类之间的耦合度，提高了模块的相对独立性。
         由于亲合度降低，从而提高了类的可复用率和系统的扩展性。
    缺点：
         引入过多的中介类

合成复用原则

开闭原则：是总纲，它告诉我们要对扩展开放，对修改关闭；
里氏替换原则：告诉我们不要破坏继承体系；
依赖倒置原则：告诉我们要面向接口编程；
单一职责原则：告诉我们实现类要职责单一；
接口隔离原则：告诉我们在设计接口的时候要精简单一；
迪米特法则：  告诉我们要降低耦合度；
合成复用原则：告诉我们要优先使用组合或者聚合关系复用，少用继承关系复用。

